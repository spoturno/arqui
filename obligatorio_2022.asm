.data  ; SEGMENTO DE DATOS
OUTPUT_PORT DW 10
LOG_PORT DW 20

PUERTO_SALIDA_DEFECTO EQU 15
PUERTO_LOG_DEFECTO EQU 7

STACK_LIMIT EQU 31

INPUT_PORT EQU 200

.code  ; SEGMENTO DE CODIGO
	MOV AX, 0
	MOV CX, 0 
	MOV DX, 0 ; CANTIDAD ELEMENTOS STACK
	MOV BX, 0

	MOV BX, PUERTO_SALIDA_DEFECTO
	MOV [OUTPUT_PORT], BX

	MOV BX, PUERTO_LOG_DEFECTO 
	MOV [LOG_PORT], BX

	MOV BX, 0

	JMP MAIN

MAIN:
	; MANDAR CODIGO 0 ANTES DE COMANDO
	MOV CX, 0
	MOV AX, 0
	MOV DX,[LOG_PORT]
	OUT DX, AX

	IN AX, INPUT_PORT

	CALL WRITE_PARAM_TO_LOG

	CMP AX, 1; AGREGA NUMERO AL STACK
	JE READ_PARAM

	CMP AX, 2; SETEA PUERTO DE SALIDA
	JE SET_OUTPUT_PORT

	CMP AX, 3; SETEA PUERTO DE BITACORA
	JE SET_LOG_PORT
	
	CMP AX, 4; MUESTRA TOPE DEL STACK
	JE SHOW_TOP_STACK

	CMP AX, 5; VOLCADO DEL STACK 
	JE PRINT_STACK_HANDLE

	CMP AX, 6; DUPLICA EL TOPE DEL STACK
	JE DUP_STACK

	CMP AX, 7; INTERCAMBIA EL TOPE DEL STACK CON EL ANTERIOR
	JE SWAP_TOP_STACK

	CMP AX, 8; CALCULA EL OPUESTO
	JE OPPOSITE

	CMP AX, 9; CALCULA EL FACTORIAL
	JE FACTORIAL

	CMP AX, 10; CALCULA LA SUMA DE LOS ELEMENTOS DEL STACK
	JE SUM_STACK

	CMP AX,11; SUMA BINARIA
	JE SUM_BINARY

	CMP AX,12; RESTA BINARIA
	JE SUB_BINARY

	CMP AX, 13; MULTIPLICACION BINARIA
	JE MULTIPLY_BINARY

	CMP AX, 14; DIVISION BINARIA
	JE DIV_BINARY

	CMP AX, 15; RESTO DE DIVISION BINARIA
	JE REST_DIV_BINARY

	CMP AX, 16; AND BINARIO
	JE AND_BINARY

	CMP AX, 17; OR BINARIO
	JE OR_BINARY

	CMP AX, 18; LEFT_SHIFT BINARIO
	JE LEFT_SHIFT_BINARY

	CMP AX, 19; RIGHT_SHIFT BINARIO
	JE RIGHT_SHIFT_BINARY

	CMP AX, 254; BORRA EL CONTENIDO DEL STACK
	JE CLEAR_STACK

	CMP AX, 255; DETIENE EL PROCESAMIENTO
	JMP STOP
	
RET

SET_OUTPUT_PORT:
	IN AX, INPUT_PORT
	CALL WRITE_PARAM_TO_LOG
	MOV [OUTPUT_PORT], AX
	JMP MAIN

SET_LOG_PORT:
	IN AX, INPUT_PORT
	CALL WRITE_PARAM_TO_LOG
	MOV [LOG_PORT], AX
	JMP MAIN

SHOW_TOP_STACK:
	CALL HANDLE_ERROR	
	POP AX
	CALL WRITE_TO_OUTPUT
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN

READ_PARAM:
	IN AX, INPUT_PORT
	MOV BX, AX
	CALL WRITE_PARAM_TO_LOG
	JMP STACK_IS_FULL_ERR
	CONTINUE_ADDING:
	MOV AX, BX
	PUSH AX
	MOV DX, SP
	ADD SP, 2
	CMP SP, 0
	JE STORE_BASE_POINTER
	MOV SP, DX
	JMP MAIN

STORE_BASE_POINTER:
	MOV BP, DX
	MOV SP, DX 
	JMP MAIN 	
	

PRINT_STACK_HANDLE:
	MOV CX, 200
	CALL HANDLE_ERROR
	MOV BX, SP
	JMP PRINT_STACK

PRINT_STACK: 
	POP AX
	CALL WRITE_TO_OUTPUT
	PUSH AX
	ADD SP, 2
	CMP SP, 0
	JNE PRINT_STACK
	MOV SP, BX
	CALL HANDLE_SUCCESS
	JMP MAIN

SUM_STACK:
	MOV BX, 0	
	CALL HANDLE_ERROR
	JMP SUM_STACK_HANDLER
	
SUM_STACK_HANDLER:
	POP AX
	ADD BX, AX
	CMP SP, BP
	JNE SUM_STACK_HANDLER
	POP AX
	SUB DX, 1
	ADD BX, AX
	PUSH BX
	CALL HANDLE_SUCCESS
	JMP MAIN

DUP_STACK:
	MOV DX, 102
	OUT DX, AX
	CALL HANDLE_ERROR
	POP AX
	PUSH AX
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN

SWAP_TOP_STACK:
	MOV CX, 202
	CALL HANDLE_ERROR
	POP AX
	POP BX
	PUSH AX
	PUSH BX
	CALL HANDLE_SUCCESS
	JMP MAIN

OPPOSITE:
	MOV CX, 201
	CALL HANDLE_ERROR	
	POP AX
	NOT AX
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN

SUM_BINARY:
	MOV CX, 202
	CALL HANDLE_ERROR
	JB REMOVE_TOP 
	POP AX
	POP BX
	ADD AX, BX
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN

SUB_BINARY:
	MOV CX, 202
	CALL HANDLE_ERROR
	JB REMOVE_TOP 
	POP AX
	POP BX
	SUB AX, BX
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN

MULTIPLY_BINARY:
	CMP DX, 2
	JB REMOVE_TOP 
	POP AX
	POP BX
	IMUL AX
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN

DIV_BINARY:
	MOV CX, 202
	CALL HANDLE_ERROR
	MOV BX, DX
	MOV DX, 0
	POP AX
	POP CX
	DIV CX
	PUSH AX
	MOV DX, BX
	CALL HANDLE_SUCCESS
	JMP MAIN

REST_DIV_BINARY:
	MOV CX, 202
	CALL HANDLE_ERROR
	MOV BX, DX
	MOV DX, 0
	POP AX
	POP CX
	DIV CX
	PUSH DX
	MOV DX, BX
	CALL HANDLE_SUCCESS
	JMP MAIN
	

AND_BINARY:
	MOV CX, 202
	CALL HANDLE_ERROR
	POP AX
	POP BX
	AND AX, BX
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN

OR_BINARY:
	MOV CX, 202
	CALL HANDLE_ERROR
	POP AX
	POP BX
	OR AX, BX
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN

LEFT_SHIFT_BINARY:
	CALL HANDLE_ERROR
	POP AX
	SAL AX,1
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN

RIGHT_SHIFT_BINARY:
	MOV CX, 202
	CALL HANDLE_ERROR
	POP AX
	SAR AX, 1
	PUSH AX
	CALL HANDLE_SUCCESS
	JMP MAIN
	
	

CLEAR_STACK:
	CALL HANDLE_ERROR
	SUB DX, 1
	POP AX
	CMP SP, BP
	JNE CLEAR_STACK
	POP AX
	CALL HANDLE_SUCCESS
	JMP MAIN
	
FACTORIAL:
	CALL HANDLE_ERROR
	POP AX
	MOV BX, AX
	MOV CX, DX
	MOV DX, 0
	
	
FACTORIAL_HANDLER:
	SUB BX, 1
	IMUL BX
	CMP BX, 1
	JA FACTORIAL_HANDLER
	MOV DX, CX
	PUSH AX
	JMP FACTORIAL_HANDLER
	JMP MAIN

STACK_IS_FULL_ERR:
	CMP SP, 0
	JE CONTINUE_ADDING
	MOV DX, 0
	MOV CX, BP
	SUB CX, SP
	MOV AX, CX 
	ADD AX, 2
	MOV CX, 2
	DIV CX
	CMP AX, 31
	JE HANDLE_STACK_IS_FULL_ERR
	JMP CONTINUE_ADDING
	
HANDLE_STACK_IS_FULL_ERR:
	MOV DX, [LOG_PORT]
	MOV AX, 4
	OUT DX, AX
	JMP MAIN


WRITE_PARAM_TO_LOG PROC
	MOV DX, [LOG_PORT]
	OUT DX, AX
	RET
WRITE_PARAM_TO_LOG ENDP


WRITE_TO_OUTPUT PROC
	MOV DX, [OUTPUT_PORT]
	OUT DX, AX
	RET
WRITE_TO_OUTPUT ENDP


HANDLE_ERROR PROC
	POP BX
	CMP CX, 200 ; DUMP CHECK
	JE SUCCSS_FOR_DUMP
	
	CMP SP, 0
	JE MISSING_ARGUMENTS_IN_STACK

	CMP CX, 201 ; 1 ELEMENT CHECK
	JE THERE_IS_ONE_ELEMENT

	CMP CX, 202	; 2 ELEMENTS CHECK
	JE NO_TWO_ELEMENTS_ERR

	PUSH BX
	RET

	THERE_IS_ONE_ELEMENT:
		PUSH BX
		RET

	NO_TWO_ELEMENTS_ERR:
		MOV DX, SP
		ADD DX, 2
		CMP DX, 0
		JE MISSING_ARGUMENTS_IN_STACK

	SUCCSS_FOR_DUMP:
		CMP SP, 0
		JNE RETURN
		CALL HANDLE_SUCCESS
		JMP MAIN

	MISSING_ARGUMENTS_IN_STACK:
		MOV DX, [LOG_PORT]
		MOV AX, 8
		OUT DX, AX
		CMP SP, 0
		JNE REMOVE_TOP
		JMP MAIN

	REMOVE_TOP:
		POP AX
		JMP MAIN
		
	RETURN:
		PUSH BX
		RET

HANDLE_ERROR ENDP


HANDLE_SUCCESS PROC
	MOV DX, [LOG_PORT]
	MOV AX, 16
	OUT DX, AX
	RET
HANDLE_SUCCESS ENDP


STOP:
	CALL HANDLE_SUCCESS



.ports ; DEFINICION DE PUERTOS
200:   1, 1, 1, 2, 1, 3, 1, 4, 1, 5, 1, 6, 1, 7, 1, 8, 1, 9, 1, 10, 1, 11, 1, 12, 1, 13, 1, 14, 1, 15, 1, 16, 1, 17, 1, 18, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 1, 26, 1, 27, 1, 28, 1, 29, 1, 30, 1, 31, 1, 32,  5, 255

.interrupts ; Manejadores de interrupciones
; Ejemplo interrupcion del timer
;!INT 8 1
;  iret
;!ENDINT
